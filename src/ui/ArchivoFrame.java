/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.Arrays;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import main.ObligatorioSeguridad;
import main.Utiles;

/**
 *
 * @author juan
 */
public class ArchivoFrame extends javax.swing.JFrame {
    private byte[] textoCifrado;
    private SecretKeySpec secretKeySpec;
    private byte[] realSig;
    private PublicKey pub;

    /**
     * Creates new form ArchivoFrame
     */
    public ArchivoFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        seleccionarArchivo_btn = new javax.swing.JButton();
        ruta_tv = new javax.swing.JLabel();
        guardarClave_btn = new javax.swing.JButton();
        clave_et = new javax.swing.JTextField();
        cifrar_btn = new javax.swing.JButton();
        descifrar_btn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textoCifrado_ta = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        textoDescifrado_ta = new javax.swing.JTextArea();
        logOut_btn = new javax.swing.JButton();
        firmar_btn = new javax.swing.JButton();
        comprobar_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Obligatorio Seguridad");
        setMaximumSize(new java.awt.Dimension(540, 452));
        setMinimumSize(new java.awt.Dimension(540, 452));
        setPreferredSize(new java.awt.Dimension(540, 452));
        setResizable(false);

        seleccionarArchivo_btn.setText("Seleccionar archivo");
        seleccionarArchivo_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarArchivo_btnActionPerformed(evt);
            }
        });

        guardarClave_btn.setText("Guardar clave");
        guardarClave_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarClave_btnActionPerformed(evt);
            }
        });

        clave_et.setText("Ingrese su clave");

        cifrar_btn.setText("Cifrar");
        cifrar_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cifrar_btnActionPerformed(evt);
            }
        });

        descifrar_btn.setText("Descifrar");
        descifrar_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descifrar_btnActionPerformed(evt);
            }
        });

        textoCifrado_ta.setColumns(20);
        textoCifrado_ta.setRows(5);
        jScrollPane1.setViewportView(textoCifrado_ta);

        textoDescifrado_ta.setColumns(20);
        textoDescifrado_ta.setRows(5);
        jScrollPane2.setViewportView(textoDescifrado_ta);

        logOut_btn.setText("Log out");
        logOut_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOut_btnActionPerformed(evt);
            }
        });

        firmar_btn.setText("Firmar");
        firmar_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firmar_btnActionPerformed(evt);
            }
        });

        comprobar_btn.setText("Comprobar firma");
        comprobar_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprobar_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(seleccionarArchivo_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(ruta_tv, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(logOut_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(guardarClave_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cifrar_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firmar_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(descifrar_btn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(clave_et, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(comprobar_btn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(17, 17, 17)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(seleccionarArchivo_btn, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ruta_tv, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarClave_btn)
                    .addComponent(clave_et, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cifrar_btn)
                    .addComponent(descifrar_btn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firmar_btn)
                    .addComponent(comprobar_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(62, 62, 62)
                .addComponent(logOut_btn)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void seleccionarArchivo_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarArchivo_btnActionPerformed
        final JFileChooser fc = new JFileChooser(); 
        int returnVal = fc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                ObligatorioSeguridad.archivo = fc.getSelectedFile();
                ruta_tv.setText(ObligatorioSeguridad.archivo.getAbsolutePath());
            } else {
            }
    }//GEN-LAST:event_seleccionarArchivo_btnActionPerformed

    private void guardarClave_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarClave_btnActionPerformed
        if (clave_et.getText().equals("") 
                || clave_et.getText().equals("Ingrese su clave")) {
            JOptionPane.showMessageDialog(this, "Debe ingresar una clave para poder cifrar"
                    + " o descifrar", "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else if (clave_et.getText().length() != 16) {
            JOptionPane.showMessageDialog(this, "El largo de la clave debe ser de 16 "
                    + "caracteres", "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            ObligatorioSeguridad.claveParaCifrarODescifrar = clave_et.getText();
            byte[] key = ObligatorioSeguridad.claveParaCifrarODescifrar.getBytes();
            this.secretKeySpec = new SecretKeySpec(key, "AES");
        }
    }//GEN-LAST:event_guardarClave_btnActionPerformed

    private void logOut_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOut_btnActionPerformed
        ObligatorioSeguridad.claveParaCifrarODescifrar = "";
        this.setVisible(false);
        new InicioFrame().setVisible(true);
    }//GEN-LAST:event_logOut_btnActionPerformed

    private void cifrar_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cifrar_btnActionPerformed
        if (ObligatorioSeguridad.archivo == null) {
            JOptionPane.showMessageDialog(this, "No se seleccionó ningún archivo para cifrar",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        } else if (ObligatorioSeguridad.claveParaCifrarODescifrar == null) {
            JOptionPane.showMessageDialog(this, "No se ingresó una clave para cifrar",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        } else {              
            byte[] textoPlano = null;
            try {
                textoPlano = Utiles.readFile(ObligatorioSeguridad.archivo).getBytes();

                // Instantiate the cipher
                Cipher cipher = Cipher.getInstance("AES");
                cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);

                this.textoCifrado = cipher.doFinal(textoPlano);
                String texto= this.textoCifrado.toString();
                this.textoCifrado_ta.setText(texto);
                
            } catch (InvalidKeyException ex) {
                Logger.getLogger(ArchivoFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(ArchivoFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(ArchivoFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(ArchivoFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadPaddingException ex) {
                Logger.getLogger(ArchivoFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException e) {
                System.out.println("Exception: " + e);
            } 
        }
    }//GEN-LAST:event_cifrar_btnActionPerformed

    private void descifrar_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descifrar_btnActionPerformed
        if (ObligatorioSeguridad.archivo == null) {
            JOptionPane.showMessageDialog(this, "No se seleccionó ningún archivo para"
                    + " descifrar",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        } else if (ObligatorioSeguridad.claveParaCifrarODescifrar == null) {
            JOptionPane.showMessageDialog(this, "No se ingresó una clave para descifrar",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                if (this.textoCifrado != null) {
                    Cipher cipher = Cipher.getInstance("AES");
                    cipher.init(Cipher.DECRYPT_MODE, this.secretKeySpec);
                    
                    byte[] original = cipher.doFinal(this.textoCifrado);
                    String textoDescifrado = new String(original);
                    this.textoDescifrado_ta.setText(textoDescifrado);
                } else {
                    JOptionPane.showMessageDialog(this, "No se cifro el texto",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                }            
                
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(ArchivoFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(ArchivoFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(ArchivoFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(ArchivoFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadPaddingException ex) {
                Logger.getLogger(ArchivoFrame.class.getName()).log(Level.SEVERE, null, ex);
            } 
            
        }
    }//GEN-LAST:event_descifrar_btnActionPerformed

    private void firmar_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firmar_btnActionPerformed
        if (ObligatorioSeguridad.archivo == null) {
            JOptionPane.showMessageDialog(this, "No se seleccionó ningún archivo para cifrar",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                
                File fp = ObligatorioSeguridad.archivo;
                KeyPairGenerator keyGen = KeyPairGenerator.getInstance("DSA");
                SecureRandom random = SecureRandom.getInstance("SHA1PRNG", "SUN");
                keyGen.initialize(1024, random);
                KeyPair pair = keyGen.generateKeyPair();
                PrivateKey priv = pair.getPrivate();
                this.pub = pair.getPublic();
                Signature dsa = Signature.getInstance("SHA1withDSA");
                dsa.initSign(priv);
                
                FileInputStream fis = new FileInputStream(fp);
                BufferedInputStream bufin = new BufferedInputStream(fis);
                byte[] buffer = new byte[1024];
                int len;
                while ((len = bufin.read(buffer)) >= 0) {
                    dsa.update(buffer, 0, len);
                };
                bufin.close();
       
                this.realSig = dsa.sign();
                
                String texto = "Firma: " + realSig.toString();
                texto += "\n";
                byte[] key = pub.getEncoded();
                texto += "Clave Publica: " + key.toString();
                
                this.textoCifrado_ta.setText(texto);             
            } catch (NoSuchAlgorithmException | NoSuchProviderException | InvalidKeyException | SignatureException ex) {
                Logger.getLogger(ArchivoFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ArchivoFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ArchivoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
    }//GEN-LAST:event_firmar_btnActionPerformed

    private void comprobar_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprobar_btnActionPerformed
        if (ObligatorioSeguridad.archivo == null) {
            JOptionPane.showMessageDialog(this, "No se seleccionó ningún archivo para cifrar",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        } else {              
            try {
                File fp = ObligatorioSeguridad.archivo;
                PublicKey pubKey = this.pub;
                
                byte[] sigToVerify = this.realSig;
                
                Signature sig = Signature.getInstance("SHA1withDSA");
                sig.initVerify(pubKey);
               
                FileInputStream fis = new FileInputStream(fp);
                BufferedInputStream bufin = new BufferedInputStream(fis);
                
                byte[] buffer = new byte[1024];
                int len;
                while (bufin.available() != 0) {
                    len = bufin.read(buffer);
                    sig.update(buffer, 0, len);
                };
                bufin.close();
                
                boolean verifies = sig.verify(sigToVerify);
                this.textoDescifrado_ta.setText(verifies==true?"Comprobado.":"El texto se ha modificado o la clave publica no es correcta.");
            } catch (NoSuchAlgorithmException | InvalidKeyException | SignatureException ex) {
                Logger.getLogger(ArchivoFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ArchivoFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ArchivoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
           
        } 
    }//GEN-LAST:event_comprobar_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArchivoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArchivoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArchivoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArchivoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ArchivoFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cifrar_btn;
    private javax.swing.JTextField clave_et;
    private javax.swing.JButton comprobar_btn;
    private javax.swing.JButton descifrar_btn;
    private javax.swing.JButton firmar_btn;
    private javax.swing.JButton guardarClave_btn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton logOut_btn;
    private javax.swing.JLabel ruta_tv;
    private javax.swing.JButton seleccionarArchivo_btn;
    private javax.swing.JTextArea textoCifrado_ta;
    private javax.swing.JTextArea textoDescifrado_ta;
    // End of variables declaration//GEN-END:variables


    /**
     * @return the secretKeySpec
     */
    public SecretKeySpec getSecretKeySpec() {
        return secretKeySpec;
    }

    /**
     * @param secretKeySpec the secretKeySpec to set
     */
    public void setSecretKeySpec(SecretKeySpec secretKeySpec) {
        this.secretKeySpec = secretKeySpec;
    }

    /**
     * @param textoCifrado the textoCifrado to set
     */
    public void setTextoCifrado(byte[] textoCifrado) {
        this.textoCifrado = textoCifrado;
    }
}
